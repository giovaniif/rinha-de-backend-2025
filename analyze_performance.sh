#!/bin/bash

echo "üöÄ AN√ÅLISE DE PERFORMANCE - GATEWAY SELECTION"
echo "=============================================="
echo "Data/Hora: $(date)"
echo

echo "üîç COLETANDO DADOS DE PROFILING..."
echo "=================================="

# Limpar logs antigos para an√°lise limpa
docker-compose restart api1 api2
sleep 5

echo "üß™ Executando teste de carga focado em lat√™ncia..."
curl -X POST -H "Content-Type: application/json" \
     -d '{"correlationId": "perf-test-1", "amount": 10.00}' \
     "http://localhost:9999/payments" &

curl -X POST -H "Content-Type: application/json" \
     -d '{"correlationId": "perf-test-2", "amount": 15.50}' \
     "http://localhost:9999/payments" &

curl -X POST -H "Content-Type: application/json" \
     -d '{"correlationId": "perf-test-3", "amount": 25.75}' \
     "http://localhost:9999/payments" &

wait

echo "‚è±Ô∏è Aguardando processamento..."
sleep 3

echo ""
echo "üìä AN√ÅLISE DE GATEWAY SELECTION TIMING:"
echo "======================================="

echo ""
echo "üîç SELE√á√ïES LENTAS (>50ms):"
SLOW_SELECTIONS=$(docker-compose logs api1 api2 | grep "GATEWAY_SELECTION_SLOW" | wc -l)
echo "Total de sele√ß√µes lentas: $SLOW_SELECTIONS"

if [ $SLOW_SELECTIONS -gt 0 ]; then
    echo ""
    echo "--- Detalhes das sele√ß√µes lentas ---"
    docker-compose logs api1 api2 | grep "GATEWAY_SELECTION_SLOW" | head -5
fi

echo ""
echo "‚ö° TEMPOS DE SELE√á√ÉO POR M√âTODO:"
echo "==============================="

echo ""
echo "Redis Cache (m√©todo mais r√°pido):"
REDIS_SELECTIONS=$(docker-compose logs api1 api2 | grep "GATEWAY_SELECTED.*redis_cache" | wc -l)
echo "  Quantidade: $REDIS_SELECTIONS"
if [ $REDIS_SELECTIONS -gt 0 ]; then
    echo "  Exemplo:"
    docker-compose logs api1 api2 | grep "GATEWAY_SELECTED.*time=" | head -1
fi

echo ""
echo "Historical Cache:"
HISTORY_SELECTIONS=$(docker-compose logs api1 api2 | grep "GATEWAY_SELECTED_FROM_HISTORY" | wc -l)
echo "  Quantidade: $HISTORY_SELECTIONS"

echo ""
echo "Grace Period:"
GRACE_SELECTIONS=$(docker-compose logs api1 api2 | grep "GATEWAY_SELECTED_GRACE_PERIOD" | wc -l)
echo "  Quantidade: $GRACE_SELECTIONS"

echo ""
echo "üïê AN√ÅLISE DE COMPONENTES DE LAT√äNCIA:"
echo "======================================"

echo ""
echo "Redis Lookup Time:"
docker-compose logs api1 api2 | grep "GATEWAY_SELECTION_SLOW" | \
    grep -o "redis=[0-9.]*[a-z]*" | head -5

echo ""
echo "History Lookup Time:"
docker-compose logs api1 api2 | grep "GATEWAY_SELECTION_SLOW" | \
    grep -o "history=[0-9.]*[a-z]*" | head -5

echo ""
echo "Grace Period Time:"
docker-compose logs api1 api2 | grep "GATEWAY_SELECTION_SLOW" | \
    grep -o "grace=[0-9.]*[a-z]*" | head -5

echo ""
echo "üéØ DIAGN√ìSTICO E RECOMENDA√á√ïES:"
echo "==============================="

if [ $SLOW_SELECTIONS -gt 0 ]; then
    echo "‚ùå PROBLEMA IDENTIFICADO: Sele√ß√µes de gateway lentas detectadas"
    echo ""
    echo "üìã POSS√çVEIS CAUSAS:"
    echo "1. Redis com alta lat√™ncia"
    echo "2. Lock contention no RWMutex"
    echo "3. C√°lculos hist√≥ricos custosos"
    echo "4. M√∫ltiplas consultas Redis sequenciais"
    echo ""
    echo "üîß PR√ìXIMAS OTIMIZA√á√ïES RECOMENDADAS:"
    echo "1. Implementar cache local em mem√≥ria"
    echo "2. Usar pipeline Redis para m√∫ltiplas consultas"
    echo "3. Reduzir granularidade dos locks"
    echo "4. Cache de resultado da √∫ltima sele√ß√£o"
else
    echo "‚úÖ GATEWAY SELECTION PERFORM√ÅTICO"
    echo "   Todas as sele√ß√µes est√£o abaixo de 50ms"
    echo ""
    echo "üîç PROCURANDO OUTROS GARGALOS..."
    echo ""
    echo "üìä PR√ìXIMA AN√ÅLISE: Payment Request Timing"
fi

echo ""
echo "üìä ESTAT√çSTICAS GERAIS:"
echo "======================"
echo "Total de logs de gateway selection: $(docker-compose logs api1 api2 | grep "GATEWAY_SELECTED" | wc -l)"
echo "Total de requests processados: $(docker-compose logs api1 api2 | grep "PAYMENT_SUCCESS\|PAYMENT_FAILED" | wc -l)"

echo ""
echo "üöÄ PARA TESTE COMPLETO DE PERFORMANCE:"
echo "======================================"
echo "1. Execute: './test_performance_deep.sh' (teste intensivo)"
echo "2. Execute: 'cd temp-rinha/rinha-test && k6 run rinha.js' (carga completa)"
echo "3. Compare com: './compare_performance_results.sh'"